apiVersion: v1
kind: ConfigMap
metadata:
  name: hooks
  namespace: shell-operator
data:
  psql.sh: |
    #!/bin/bash

    set -euo pipefail

    function ensure_db() {
      NAME="${1}"
      echo "Ensuring db '${NAME}' exists"

      if kubectl exec -i -n psql psql-0 -- psql -U postgres -nlqt | cut -d '|' -f 1 | grep -o -E \\S+ | grep -E "^${NAME}$" > /dev/null; then
        echo "${NAME} already exists"
      else
        echo "Creating db '${NAME}'"
        kubectl exec -i -n psql psql-0 -- psql -U postgres -c "CREATE USER ${NAME};"
        kubectl exec -i -n psql psql-0 -- psql -U postgres -c "CREATE DATABASE ${NAME} WITH OWNER ${NAME};"
      fi
    }

    if [[ ${1:-""} == "--config" ]] ; then
      cat <<EOF
    {
      "configVersion":"v1",
      "kubernetes":[
        {
          "apiVersion": "v1",
          "kind": "ConfigMap",

          "namespace": {
            "nameSelector": {
              "matchNames": ["psql"]
            }
          },
          "labelSelector": {
            "matchLabels":{
              "ongy.net/psql-db": "true"
            }
          },
          "executeHookOnEvent": ["Added"]
        }
      ]
    }
    EOF
    else
      type=$(jq -r '.[0].type' ${BINDING_CONTEXT_PATH})
      if [[ $type == "Synchronization" ]] ; then
        for db in $(jq -r '.[0].objects[]|.object.metadata.name' "${BINDING_CONTEXT_PATH}"); do
          ensure_db "${db}"
        done
      else
        if [[ "$(jq -r '.[0].watchEvent' "${BINDING_CONTEXT_PATH}")" = "Added" ]]; then
          ensure_db $(jq -r '.[0].object.metadata.name' "${BINDING_CONTEXT_PATH}")
        fi
      fi
    fi

  keycloak.groups: |
    - name: Realm
      hosts: localhost
      gather_facts: false
      vars:
        KEYCLOAK_URL: http://keycloak.keycloak.svc.cluster.local
        KEYCLOAK_REALM: local.ongy.net
        CLIENT_ID: __CLIENT_ID__
      tasks:
      - name: Ensure groups client scope
        community.general.keycloak_clientscope:
          auth_keycloak_url: "{{ KEYCLOAK_URL }}"
          auth_username: admin
          auth_password: admin
          auth_realm: master
          realm: "{{ KEYCLOAK_REALM }}"

          name: groups
          protocol: openid-connect
          description: Provide groups for openid clients based on roles in keycloak
          protocol_mappers:
          - name: groups
            protocol: openid-connect
            protocolMapper: oidc-usermodel-realm-role-mapper
            config:
              "access.token.claim": "true"
              "claim.name": "groups"
              "id.token.claim": "true"
              "introspection.token.claim": "true"
              "jsonType.label": "String"
              "multivalued": "true"
              "user.attribute": "foo"

      - name: Create {{ CLIENT_ID }} Client
        community.general.keycloak_client:
          auth_keycloak_url: "{{ KEYCLOAK_URL }}"
          auth_username: admin
          auth_password: admin
          auth_realm: master
          realm: "{{ KEYCLOAK_REALM }}"

          client_id: "{{ CLIENT_ID }}"
          consent_required: false
          direct_access_grants_enabled: false
          public_client: false
          redirect_uris:
          - https://{{ CLIENT_ID }}.local.ongy.net/oauth2/callback
          default_client_scopes:
          - groups

          - name: Read {{ CLIENT_ID }} client secret
            register: "client_id"
            community.general.keycloak_clientsecret_info:
              auth_keycloak_url: "{{ KEYCLOAK_URL }}"
              auth_username: admin
              auth_password: admin
              auth_realm: master
              realm: "{{ KEYCLOAK_REALM }}"
              client_id: "{{ CLIENT_ID }}"

          - name: Store {{ CLIENT_ID }} client secret
            ansible.builtin.copy:
              dest: "{{ CLIENT_ID }}.secret"
              content: "{{ client_id.clientsecret_info.value }}"

  keycloak.oauth-proxy: |
      - name: Realm
        hosts: localhost
        gather_facts: false
        vars:
          KEYCLOAK_URL: http://keycloak.keycloak.svc.cluster.local
          KEYCLOAK_REALM: local.ongy.net
          CLIENT_ID: __CLIENT_ID__
        tasks:
        - name: Create {{ CLIENT_ID }} client
          community.general.keycloak_client:
            auth_keycloak_url: "{{ KEYCLOAK_URL }}"
            auth_username: admin
            auth_password: admin
            auth_realm: master
            realm: "{{ KEYCLOAK_REALM }}"

            client_id: "{{ CLIENT_ID }}"
            consent_required: false
            name: "{{ CLIENT_ID }}"
            direct_access_grants_enabled: false
            public_client: false
            redirect_uris:
            - https://{{ CLIENT_ID }}.local.ongy.net/oauth2/callback

            protocol_mappers:
            - name: aud-mapper-{{ CLIENT_ID }}
              protocol: openid-connect
              protocolMapper: oidc-audience-mapper
              config:
                "access.token.claim": "true"
                "id.token.claim": "true"
                "included.client.audience": "{{ CLIENT_ID }}"
                "introspection.token.claim": "true"
                "lightweight.claim": "false"

        - name: Read {{ CLIENT_ID }} client secret
          register: "client_id"
          community.general.keycloak_clientsecret_info:
            auth_keycloak_url: "{{ KEYCLOAK_URL }}"
            auth_username: admin
            auth_password: admin
            auth_realm: master
            realm: "{{ KEYCLOAK_REALM }}"
            client_id: "{{ CLIENT_ID }}"

        - name: Store {{ CLIENT_ID }} client secret
          ansible.builtin.copy:
            dest: "{{ CLIENT_ID }}.secret"
            content: "{{ client_id.clientsecret_info.value }}"

  keycloak.script: |
      #!/bin/bash

      set -euo pipefail

      function ensure_client() {
        NAME="${1}"
        NAMESPACE="${2}"
        echo "Ensuring client '${NAME}' exists for NS '${NAMESPACE}"

        if [ "$(kubectl get -n argo-workflows configmap argo-workflows -o jsonpath="{.metadata.labels.ongy\\.net/keycloak-application-type}")" = group ]; then
          </templates/keycloak-groups sed -e "s/__CLIENT_ID__/${NAME}/" > "/ansible/${NAME}.playbook.yaml"
        else
          </templates/keycloak-oauth-proxy sed -e "s/__CLIENT_ID__/${NAME}/" > "/ansible/${NAME}.playbook.yaml"
        fi

        kubectl exec -i -n shell-operator deploy/shell-operator --container ansible -- \
          env HOME=/tmp/ ansible-playbook "/ansible/${NAME}.playbook.yaml"

        jq --null-input -cr \
          --arg name keycloak-client-"${NAME}" \
          --arg namespace "${NAMESPACE}" \
          --arg client_id $(echo -n "${NAME}" | base64) \
          --arg client_secret $(</ansible/${NAME}.secret base64) \
          '{"apiVersion": "v1", "kind": "Secret", "type": "Opaque", "metadata": { "name": $name, "namespace": $namespace }, "data": { "client_id": $client_id, "client_secret": $client_secret } }' \
          | tee /tmp/${NAME}.secret | kubectl apply -f -
      }

      if [[ ${1:-""} == "--config" ]] ; then
        cat <<EOF
      {
        "configVersion":"v1",
        "kubernetes":[
          {
            "apiVersion": "v1",
            "kind": "ConfigMap",

            "labelSelector": {
              "matchLabels":{
                "ongy.net/keycloak-application": "true"
              }
            },
            "executeHookOnEvent": ["Added"]
          }
        ]
      }
      EOF
      else
        type=$(jq -r '.[0].type' ${BINDING_CONTEXT_PATH})
        cp "${BINDING_CONTEXT_PATH}" /tmp/values.backup
        if [[ $type == "Synchronization" ]] ; then
          for db in $(jq -r '.[0].objects[]|.object.metadata.name' "${BINDING_CONTEXT_PATH}"); do
            NS=$(jq -r ".[0]|.objects[] | select(.object.metadata.name == \"${db}\")|.object.metadata.namespace" "${BINDING_CONTEXT_PATH}")
            ensure_client "${db}" "${NS}"
          done
        else
          if [[ "$(jq -r '.[0].watchEvent' "${BINDING_CONTEXT_PATH}")" = "Added" ]]; then
            ensure_client "$(jq -r '.[0].object.metadata.name' "${BINDING_CONTEXT_PATH}")" "$(jq -r '.[0].object.metadata.namespace' "${BINDING_CONTEXT_PATH}")"
          fi
        fi
      fi