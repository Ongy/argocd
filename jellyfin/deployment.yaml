apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: jellyfin
  name: jellyfin
  namespace: mediaserver
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: jellyfin
  template:
    metadata:
      labels:
        app: jellyfin
    spec:
      nodeSelector:
        kubernetes.io/hostname: mario
      volumes:
        - name: jellyfin-config
          hostPath:
            path: "/srv/share/backed/appdata/jellyfin/"
            type: Directory
        - name: media-data
          hostPath:
            path: "/srv/share/media/"
            type: Directory
      containers:
        - image: jellyfin/jellyfin:10.9.4 # {"$imagepolicy": "flux-system:jellyfin"}
          env:
            - name: JELLYFIN_DATA_DIR
              value: /config/data
            - name: JELLYFIN_CONFIG_DIR
              value: /config
            - name: JELLYFIN_CACHE_DIR
              value: /config/cache
          securityContext:
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop: ['ALL']
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            privileged: false
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1004
          readinessProbe:
            httpGet:
              path: /health
              port: 8096
          name: jellyfin
          volumeMounts:
            - mountPath: "/config"
              name: jellyfin-config
            - mountPath: "/data"
              name: media-data
              readOnly: true
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: jellyfin-mpv
  name: jellyfin-mpv
  namespace: jellyfin
spec:
  selector:
    matchLabels:
      app: jellyfin-mpv
  template:
    metadata:
      labels:
        app: jellyfin-mpv
    spec:
      terminationGracePeriodSeconds: 5
      serviceAccountName: jellyfin-mpv-log-reader
      nodeSelector:
        graphics: wayland
      volumes:
        - name: tmp-dir
          emptyDir:
            medium: Memory
            sizeLimit: 500Mi
        - name: user-run
          hostPath:
            path: "/run/user/1000/"
            type: Directory
        - name: config-home
          hostPath:
            path: "/home/ongy/.config/jellyfin-mpv-shim/"
            type: Directory
        - name: x11-unix
          hostPath:
            path: "/tmp/.X11-unix/"
            type: Directory
        - name: kube-root-ca
          configMap:
            name: kube-root-ca.crt
      containers:
        - image: cr.local.ongy.net/jellyfin-mpv-shim:20240606
          env:
            - name: XDG_RUNTIME_DIR
              value: "/run/user/1000/"
            - name: WAYLAND_DISPLAY
              value: "invalid"
            - name: DISPLAY
              value: ":0"
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUBERNETES_POD
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          securityContext:
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop: ['ALL']
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 110
            privileged: true
          name: jellyfin-mpv
          volumeMounts:
            - mountPath: "/run/user/1000"
              name: user-run
            - mountPath: "/home/jellyfin/.config/jellyfin-mpv-shim"
              name: config-home
            - mountPath: "/tmp/.X11-unix/"
              name: x11-unix
            - mountPath: "/tmp/"
              name: tmp-dir
            - mountPath: "/etc/kube-ca.crt"
              name: kube-root-ca
              subPath: ca.crt
          livenessProbe:
            exec:
              command:
                - sh
                - -e
                - -c
                - "curl --cacert /etc/kube-ca.crt -s https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT_HTTPS}/api/v1/namespaces/${KUBERNETES_NAMESPACE}/pods/${KUBERNETES_POD}/log?sinceSeconds=60 -H \"Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\" | grep -q -e KeepAlive -e /Sessions/Playing/Progress"
            timeoutSeconds: 5
            initialDelaySeconds: 15
            failureThreshold: 2
            periodSeconds: 15
