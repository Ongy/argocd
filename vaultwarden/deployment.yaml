apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: vaultwarden
  name: vaultwarden
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vaultwarden
  template:
    metadata:
      labels:
        app: vaultwarden
    spec:
      securityContext:
        sysctls:
        - name: "net.ipv4.ip_unprivileged_port_start"
          value: "80"
      volumes:
      - name: data
        nfs:
          path: /srv/share/backed/appdata/vaultwarden
          server: mario.local.ongy.net
          readOnly: false
      containers:
      - name: vaultwarden
        ports:
        - name: http
          containerPort: 80
          protocol: 80
        volumeMounts:
        - name: data
          mountPath: "/data"
        resources:
          requests:
            memory: "25Mi"
          limits:
            memory: "25Mi"
        securityContext:
          seccompProfile:
            type: RuntimeDefault
          capabilities:
            drop: [ALL]
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 10001
          runAsGroup: 10001
          privileged: false
        image: vaultwarden/server:latest
        workingDir: /
---
apiVersion: v1
kind: Service
metadata:
  name: vaultwarden
spec:
  selector:
    app: vaultwarden
  ports:
  - protocol: TCP
    port: 80
    targetport: http
    name: http
---
apiVersion: network.istio.io/v1beta1
kind: VirtualService
metadata:
  name: bitwarden-vaultwarden
  namespace: default
spec:
  gateways: [istio-system/gateway]
  hosts: [bitwarden.local.ongy.net]
  http:
  - route:
    - destination:
        host: vaultwarden.experiments.svc.cluster.local
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: vaultwarden-confine
spec:
  podSelector:
    matchLabels:
      app: vaultwarden
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          kubeernetes.io/metadata.name: istio-system
